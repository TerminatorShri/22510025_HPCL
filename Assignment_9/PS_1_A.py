import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV generated by the N-Queens C program
df = pd.read_csv("PS_1_A.csv")

# Ensure sorting
df = df.sort_values(by=["BoardSize", "Threads"])

# --- Plot 1: Execution Time vs Number of Threads ---
plt.figure(figsize=(10, 6))
for boardsize in df['BoardSize'].unique():
    subset = df[df['BoardSize'] == boardsize]
    plt.plot(subset['Threads'], subset['ExecutionTime'],
             marker='o', label=f"BoardSize = {boardsize}")

plt.title("N-Queens: Execution Time vs Number of Threads")
plt.xlabel("Number of Threads")
plt.ylabel("Execution Time (s)")
plt.xticks(sorted(df['Threads'].unique()))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("NQueens_Execution_Time_vs_Threads.png")
plt.show()


# --- Plot 2: Speedup vs Number of Threads ---
plt.figure(figsize=(10, 6))
for boardsize in df['BoardSize'].unique():
    subset = df[df['BoardSize'] == boardsize].copy()
    time_1_thread = subset[subset['Threads'] == 1]['ExecutionTime'].values[0]
    subset['Speedup'] = time_1_thread / subset['ExecutionTime']
    plt.plot(subset['Threads'], subset['Speedup'],
             marker='o', label=f"BoardSize = {boardsize}")

# Ideal linear speedup line
max_threads = df['Threads'].max()
plt.plot(range(1, max_threads+1), range(1, max_threads+1),
         'k--', label="Ideal Linear Speedup")

plt.title("N-Queens: Speedup vs Number of Threads")
plt.xlabel("Number of Threads")
plt.ylabel("Speedup")
plt.xticks(sorted(df['Threads'].unique()))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("NQueens_Speedup_vs_Threads.png")
plt.show()


# --- Plot 3: Execution Time vs Board Size (for fixed thread count) ---
fixed_thread = 4  # Change this if you want another thread count
fixed_df = df[df['Threads'] == fixed_thread]

plt.figure(figsize=(10, 6))
plt.plot(fixed_df['BoardSize'], fixed_df['ExecutionTime'],
         marker='o', color='purple')
plt.title(f"N-Queens: Execution Time vs Board Size (Threads = {fixed_thread})")
plt.xlabel("Board Size (N)")
plt.ylabel("Execution Time (s)")
plt.grid(True)
plt.tight_layout()
plt.savefig("NQueens_Execution_Time_vs_BoardSize.png")
plt.show()


# --- Plot 4: Solutions vs Board Size ---
# Use single-thread run to avoid duplicates
solutions_df = df[df['Threads'] == 1]
plt.figure(figsize=(10, 6))
plt.plot(solutions_df['BoardSize'], solutions_df['Solutions'],
         marker='o', color='orange')
plt.title("N-Queens: Number of Solutions vs Board Size")
plt.xlabel("Board Size (N)")
plt.ylabel("Number of Solutions")
plt.grid(True)
plt.tight_layout()
plt.savefig("NQueens_Solutions_vs_BoardSize.png")
plt.show()

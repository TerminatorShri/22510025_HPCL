import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV generated by C program
df = pd.read_csv("PS_1.csv")  # replace with your CSV file path

# Ensure sorting by MatrixSize and NumProcesses
df = df.sort_values(by=["MatrixSize", "NumProcesses"])

# --- Plot 1: Execution Time vs Number of Processes ---
plt.figure(figsize=(10, 6))
for size in df['MatrixSize'].unique():
    subset = df[df['MatrixSize'] == size]
    plt.plot(subset['NumProcesses'], subset['TimeTaken'],
             marker='o', label=f"MatrixSize = {size}")

plt.title("Execution Time vs Number of Processes")
plt.xlabel("Number of Processes")
plt.ylabel("Execution Time (s)")
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("Execution_Time_vs_Processes_PS_1.png")
plt.show()

# --- Plot 2: Speedup vs Number of Processes ---
plt.figure(figsize=(10, 6))
for size in df['MatrixSize'].unique():
    subset = df[df['MatrixSize'] == size].copy()
    time_1_process = subset[subset['NumProcesses'] == 1]['TimeTaken'].values[0]
    subset['Speedup'] = time_1_process / subset['TimeTaken']
    plt.plot(subset['NumProcesses'], subset['Speedup'],
             marker='o', label=f"MatrixSize = {size}")

# Ideal linear speedup line
max_procs = df['NumProcesses'].max()
plt.plot(range(1, max_procs+1), range(1, max_procs+1),
         'k--', label="Ideal Linear Speedup")

plt.title("Speedup vs Number of Processes")
plt.xlabel("Number of Processes")
plt.ylabel("Speedup")
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("Speedup_vs_Processes_PS_1.png")
plt.show()

# --- Plot 3: Execution Time vs Matrix Size (for fixed process count) ---
fixed_process = 4  # you can change this to any number of processes you want
fixed_df = df[df['NumProcesses'] == fixed_process]

plt.figure(figsize=(10, 6))
plt.plot(fixed_df['MatrixSize'], fixed_df['TimeTaken'],
         marker='o', color='green')
plt.title(f"Execution Time vs Matrix Size (Processes = {fixed_process})")
plt.xlabel("Matrix Size")
plt.ylabel("Execution Time (s)")
plt.grid(True)
plt.tight_layout()
plt.savefig("Execution_Time_vs_MatrixSize_PS_1.png")
plt.show()

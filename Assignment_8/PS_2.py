import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV generated by C program
df = pd.read_csv("PS_2.csv")  # CSV file path

# Ensure sorting by VectorSize and NumProcesses
df = df.sort_values(by=["VectorSize", "NumProcesses"])

# --- Plot 1: Execution Time vs Number of Processes ---
plt.figure(figsize=(12, 8))
plt.subplot(2, 2, 1)
for size in df['VectorSize'].unique():
    subset = df[df['VectorSize'] == size]
    plt.plot(subset['NumProcesses'], subset['TimeTaken'],
             marker='o', label=f"Vector Size = {size}")

plt.title("MPI Dot Product: Execution Time vs Number of Processes")
plt.xlabel("Number of Processes")
plt.ylabel("Execution Time (s)")
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True)
plt.legend()

# --- Plot 2: Speedup vs Number of Processes ---
plt.subplot(2, 2, 2)
for size in df['VectorSize'].unique():
    subset = df[df['VectorSize'] == size].copy()
    if len(subset[subset['NumProcesses'] == 1]) > 0:
        time_1_process = subset[subset['NumProcesses']
                                == 1]['TimeTaken'].values[0]
        subset['Speedup'] = time_1_process / subset['TimeTaken']
        plt.plot(subset['NumProcesses'], subset['Speedup'],
                 marker='s', label=f"Vector Size = {size}")

# Ideal linear speedup line
max_procs = df['NumProcesses'].max()
plt.plot(range(1, max_procs+1), range(1, max_procs+1),
         'k--', label="Ideal Linear Speedup")

plt.title("MPI Dot Product: Speedup vs Number of Processes")
plt.xlabel("Number of Processes")
plt.ylabel("Speedup")
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True)
plt.legend()

# --- Plot 3: Execution Time vs Vector Size ---
plt.subplot(2, 2, 3)
# Choose a fixed number of processes for this analysis
fixed_processes = [1, 2, 4] if df['NumProcesses'].max(
) >= 4 else sorted(df['NumProcesses'].unique())[:3]

for proc_count in fixed_processes:
    if proc_count in df['NumProcesses'].values:
        subset = df[df['NumProcesses'] == proc_count]
        plt.plot(subset['VectorSize'], subset['TimeTaken'],
                 marker='^', label=f"{proc_count} Process(es)")

plt.title("MPI Dot Product: Execution Time vs Vector Size")
plt.xlabel("Vector Size")
plt.ylabel("Execution Time (s)")
plt.grid(True)
plt.legend()

# --- Plot 4: Efficiency Analysis ---
plt.subplot(2, 2, 4)
for size in df['VectorSize'].unique():
    subset = df[df['VectorSize'] == size].copy()
    if len(subset[subset['NumProcesses'] == 1]) > 0:
        time_1_process = subset[subset['NumProcesses']
                                == 1]['TimeTaken'].values[0]
        subset['Speedup'] = time_1_process / subset['TimeTaken']
        subset['Efficiency'] = subset['Speedup'] / subset['NumProcesses'] * 100
        plt.plot(subset['NumProcesses'], subset['Efficiency'],
                 marker='d', label=f"Vector Size = {size}")

plt.title("MPI Dot Product: Parallel Efficiency")
plt.xlabel("Number of Processes")
plt.ylabel("Efficiency (%)")
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True)
plt.legend()
plt.axhline(y=100, color='r', linestyle='--',
            alpha=0.7, label='100% Efficiency')

plt.tight_layout()
plt.savefig("PS_2_Dot_Product_Analysis.png", dpi=300, bbox_inches='tight')
plt.show()

# --- Performance Summary Table ---
print("\n=== MPI DOT PRODUCT PERFORMANCE ANALYSIS ===")
print("\nPerformance Summary:")
print("-" * 60)
print(f"{'Vector Size':<12} {'Processes':<10} {'Time (s)':<10} {'Speedup':<8} {'Efficiency (%)':<12}")
print("-" * 60)

for size in sorted(df['VectorSize'].unique()):
    subset = df[df['VectorSize'] == size].copy()
    if len(subset[subset['NumProcesses'] == 1]) > 0:
        time_1_process = subset[subset['NumProcesses']
                                == 1]['TimeTaken'].values[0]
        for _, row in subset.iterrows():
            speedup = time_1_process / row['TimeTaken']
            efficiency = (speedup / row['NumProcesses']) * 100
            print(
                f"{size:<12} {row['NumProcesses']:<10} {row['TimeTaken']:<10.6f} {speedup:<8.2f} {efficiency:<12.2f}")
        print("-" * 60)

# --- Save individual plots ---
# Execution Time vs Processes
plt.figure(figsize=(10, 6))
for size in df['VectorSize'].unique():
    subset = df[df['VectorSize'] == size]
    plt.plot(subset['NumProcesses'], subset['TimeTaken'],
             marker='o', linewidth=2, markersize=8, label=f"Vector Size = {size}")

plt.title("MPI Dot Product: Execution Time vs Number of Processes",
          fontsize=14, fontweight='bold')
plt.xlabel("Number of Processes", fontsize=12)
plt.ylabel("Execution Time (seconds)", fontsize=12)
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True, alpha=0.7)
plt.legend(fontsize=10)
plt.tight_layout()
plt.savefig("PS_2_Execution_Time_vs_Processes.png",
            dpi=300, bbox_inches='tight')
plt.show()

# Speedup vs Processes
plt.figure(figsize=(10, 6))
for size in df['VectorSize'].unique():
    subset = df[df['VectorSize'] == size].copy()
    if len(subset[subset['NumProcesses'] == 1]) > 0:
        time_1_process = subset[subset['NumProcesses']
                                == 1]['TimeTaken'].values[0]
        subset['Speedup'] = time_1_process / subset['TimeTaken']
        plt.plot(subset['NumProcesses'], subset['Speedup'],
                 marker='s', linewidth=2, markersize=8, label=f"Vector Size = {size}")

# Ideal speedup line
max_procs = df['NumProcesses'].max()
plt.plot(range(1, max_procs+1), range(1, max_procs+1),
         'k--', linewidth=2, alpha=0.8, label="Ideal Linear Speedup")

plt.title("MPI Dot Product: Speedup vs Number of Processes",
          fontsize=14, fontweight='bold')
plt.xlabel("Number of Processes", fontsize=12)
plt.ylabel("Speedup", fontsize=12)
plt.xticks(sorted(df['NumProcesses'].unique()))
plt.grid(True, alpha=0.7)
plt.legend(fontsize=10)
plt.tight_layout()
plt.savefig("PS_2_Speedup_vs_Processes.png", dpi=300, bbox_inches='tight')
plt.show()

# Vector Size vs Time (Log scale for better visualization)
plt.figure(figsize=(10, 6))
for proc_count in [1, 2, 4, 8]:
    if proc_count in df['NumProcesses'].values:
        subset = df[df['NumProcesses'] == proc_count]
        if len(subset) > 0:
            plt.loglog(subset['VectorSize'], subset['TimeTaken'],
                       marker='^', linewidth=2, markersize=8, label=f"{proc_count} Process(es)")

plt.title("MPI Dot Product: Execution Time vs Vector Size (Log-Log Scale)",
          fontsize=14, fontweight='bold')
plt.xlabel("Vector Size", fontsize=12)
plt.ylabel("Execution Time (seconds)", fontsize=12)
plt.grid(True, alpha=0.7)
plt.legend(fontsize=10)
plt.tight_layout()
plt.savefig("PS_2_Execution_Time_vs_VectorSize.png",
            dpi=300, bbox_inches='tight')
plt.show()

print("\n=== Analysis Complete ===")
print("Generated plots:")
print("1. PS_2_Dot_Product_Analysis.png (Combined analysis)")
print("2. PS_2_Execution_Time_vs_Processes.png")
print("3. PS_2_Speedup_vs_Processes.png")
print("4. PS_2_Execution_Time_vs_VectorSize.png")
print("\nCSV data saved to: PS_2.csv")
